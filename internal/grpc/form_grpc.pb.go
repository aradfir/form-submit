// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: form.proto

package form_data

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FormSubmitClient is the client API for FormSubmit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FormSubmitClient interface {
	SubmitForm(ctx context.Context, in *FormData, opts ...grpc.CallOption) (*FormResult, error)
}

type formSubmitClient struct {
	cc grpc.ClientConnInterface
}

func NewFormSubmitClient(cc grpc.ClientConnInterface) FormSubmitClient {
	return &formSubmitClient{cc}
}

func (c *formSubmitClient) SubmitForm(ctx context.Context, in *FormData, opts ...grpc.CallOption) (*FormResult, error) {
	out := new(FormResult)
	err := c.cc.Invoke(ctx, "/form_data.FormSubmit/SubmitForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FormSubmitServer is the server API for FormSubmit service.
// All implementations must embed UnimplementedFormSubmitServer
// for forward compatibility
type FormSubmitServer interface {
	SubmitForm(context.Context, *FormData) (*FormResult, error)
	mustEmbedUnimplementedFormSubmitServer()
}

// UnimplementedFormSubmitServer must be embedded to have forward compatible implementations.
type UnimplementedFormSubmitServer struct {
}

func (UnimplementedFormSubmitServer) SubmitForm(context.Context, *FormData) (*FormResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitForm not implemented")
}
func (UnimplementedFormSubmitServer) mustEmbedUnimplementedFormSubmitServer() {}

// UnsafeFormSubmitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FormSubmitServer will
// result in compilation errors.
type UnsafeFormSubmitServer interface {
	mustEmbedUnimplementedFormSubmitServer()
}

func RegisterFormSubmitServer(s grpc.ServiceRegistrar, srv FormSubmitServer) {
	s.RegisterService(&FormSubmit_ServiceDesc, srv)
}

func _FormSubmit_SubmitForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FormData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FormSubmitServer).SubmitForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/form_data.FormSubmit/SubmitForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FormSubmitServer).SubmitForm(ctx, req.(*FormData))
	}
	return interceptor(ctx, in, info, handler)
}

// FormSubmit_ServiceDesc is the grpc.ServiceDesc for FormSubmit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FormSubmit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "form_data.FormSubmit",
	HandlerType: (*FormSubmitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitForm",
			Handler:    _FormSubmit_SubmitForm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "form.proto",
}
